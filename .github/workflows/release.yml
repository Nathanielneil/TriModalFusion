name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this Release
          
          Please see the [CHANGELOG.md](CHANGELOG.md) for detailed information about changes in this release.
          
          ## Installation
          
          ### Basic Installation
          ```bash
          pip install trimodal-fusion==${{ github.ref_name }}
          ```
          
          ### Web Demo
          ```bash
          git clone https://github.com/Nathanielneil/TriModalFusion.git
          cd TriModalFusion
          git checkout ${{ github.ref_name }}
          pip install -r requirements.txt
          pip install fastapi uvicorn jinja2 python-multipart websockets pillow
          python start_web_demo.py
          ```
          
          ## What's New
          
          - See detailed changelog for this version
          - Web interface improvements
          - Performance optimizations
          - Bug fixes and stability improvements

  build-and-test:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import src; print('Package installed successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/

  publish-pypi:
    needs: [create-release, build-and-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  build-docker:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: trimodalfusion/trimodalfusion
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  update-documentation:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Generate API documentation
      run: |
        pip install pdoc3
        pdoc --html --output-dir docs/api src/
        
    - name: Update version in README
      run: |
        sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${{ github.ref_name }}/g" README.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/ README.md
        git commit -m "Update documentation for ${{ github.ref_name }}" || exit 0
        git push

  notify-release:
    needs: [publish-pypi, build-docker, update-documentation]
    runs-on: ubuntu-latest

    steps:
    - name: Notify Discord/Slack (if configured)
      run: |
        echo "Release ${{ github.ref_name }} completed successfully!"
        # Add your notification logic here
        # curl -X POST -H 'Content-type: application/json' --data '{"text":"New TriModalFusion release: ${{ github.ref_name }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}