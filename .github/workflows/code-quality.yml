name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy bandit safety pre-commit
        pip install -r requirements.txt

    - name: Run Black (Code Formatter)
      run: |
        black --check --diff src/ tests/

    - name: Run isort (Import Sorter) 
      run: |
        isort --check-only --diff src/ tests/

    - name: Run Flake8 (Linter)
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy (Type Checker)
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Run Bandit (Security Scanner)
      run: |
        bandit -r src/ -ll -i

    - name: Run Safety (Dependency Vulnerability Scanner)
      run: |
        safety check

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME\|XXX\|HACK" src/ tests/ || echo "No TODO/FIXME comments found"

    - name: Check file permissions
      run: |
        echo "Checking for executable files that shouldn't be..."
        find src/ tests/ -name "*.py" -executable -type f | while read file; do
          echo "Warning: Python file $file is executable"
        done

    - name: Complexity Analysis
      run: |
        pip install radon
        echo "=== Cyclomatic Complexity ==="
        radon cc src/ -a -nc
        echo ""
        echo "=== Maintainability Index ==="
        radon mi src/ -nc

    - name: Documentation Coverage
      run: |
        pip install interrogate
        interrogate -v --ignore-init-method --ignore-magic --ignore-module src/

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  pre-commit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install pre-commit
      run: |
        pip install pre-commit

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit
      run: |
        pre-commit run --all-files || echo "Pre-commit hooks need configuration"

  performance-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler

    - name: Run performance benchmarks
      run: |
        # Run performance tests if they exist
        if [ -d "benchmarks/" ]; then
          python -m pytest benchmarks/ --benchmark-only --benchmark-json=benchmark_results.json
        else
          echo "No benchmark directory found"
        fi

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: benchmark-results
        path: benchmark_results.json

  license-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check license headers
      run: |
        echo "Checking for license headers in Python files..."
        python_files=$(find src/ tests/ -name "*.py" | head -20)  # Check first 20 files
        
        for file in $python_files; do
          if ! grep -q "Copyright\|License\|MIT\|Apache" "$file"; then
            echo "Warning: $file may be missing license header"
          fi
        done

    - name: Check for forbidden licenses
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        
        # Check for GPL or other copyleft licenses that might be incompatible
        if pip-licenses | grep -i "GPL\|AGPL\|LGPL"; then
          echo "Warning: Found potential copyleft licenses"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  docker-security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f deployment/docker/Dockerfile -t trimodalfusion:test .

    - name: Scan Docker image for vulnerabilities
      run: |
        # Install Trivy
        wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz
        tar zxf trivy_Linux-64bit.tar.gz
        sudo mv trivy /usr/local/bin/

        # Scan the image
        trivy image --exit-code 0 --severity HIGH,CRITICAL trimodalfusion:test

    - name: Check Dockerfile best practices
      run: |
        # Install hadolint
        wget https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint-Linux-x86_64
        sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint

        # Check Dockerfile
        hadolint deployment/docker/Dockerfile