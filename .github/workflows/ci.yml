name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "No dev requirements found"

    - name: Install package
      run: |
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        pip install black
        black --check src/ tests/ || echo "Code formatting check failed"

    - name: Sort imports with isort
      run: |
        pip install isort
        isort --check-only src/ tests/ || echo "Import sorting check failed"

    - name: Type check with mypy
      run: |
        pip install mypy
        mypy src/ || echo "Type checking failed"
      continue-on-error: true

    - name: Run tests
      run: |
        pip install pytest pytest-cov
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  web-demo-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install web demo dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install fastapi uvicorn jinja2 python-multipart websockets pillow

    - name: Test web demo startup
      run: |
        # Test that the web demo can start without errors
        timeout 30s python start_web_demo.py --check-only || exit 0

    - name: Test API endpoints
      run: |
        # Start server in background
        python start_web_demo.py &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || echo "Health check failed"
        
        # Test API info endpoint  
        curl -f http://localhost:8000/api || echo "API info failed"
        
        # Stop server
        kill $SERVER_PID || echo "Server already stopped"

  docs-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Check documentation links
      run: |
        # Check that all referenced documentation files exist
        python -c "
        import os
        import re
        
        def check_md_links(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
            
            # Find all markdown links [text](path)
            links = re.findall(r'\[.*?\]\(([^)]+)\)', content)
            
            for link in links:
                if link.startswith('http'):
                    continue  # Skip external links
                if link.startswith('#'):
                    continue  # Skip anchors
                
                # Check if file exists
                if not os.path.exists(link):
                    print(f'Missing file referenced in {file_path}: {link}')
                    
        check_md_links('README.md')
        check_md_links('WEB_DEMO_README.md')
        "

    - name: Validate YAML configs
      run: |
        pip install pyyaml
        python -c "
        import yaml
        import os
        
        config_files = ['configs/default_config.yaml', 'configs/production_config.yaml']
        
        for config_file in config_files:
            if os.path.exists(config_file):
                try:
                    with open(config_file, 'r') as f:
                        yaml.safe_load(f)
                    print(f'{config_file}: Valid YAML')
                except yaml.YAMLError as e:
                    print(f'{config_file}: Invalid YAML - {e}')
                    exit(1)
            else:
                print(f'{config_file}: File not found')
        "

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload Bandit Results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-report.json

    - name: Check for known vulnerabilities
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload Safety Results  
      uses: actions/upload-artifact@v3
      with:
        name: safety-results
        path: safety-report.json